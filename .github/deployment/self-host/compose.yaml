volumes:
  frontend_volume: {}
  frontend_storage: {}
  redis_volume: {}
  postgresql_volume: {}
  production_media: {}
  production_traefik: {}

services:
  affine:
    image: ghcr.io/toeverything/affine-graphql:canary
    container_name: affine_selfhosted
    command:
      ['sh', '-c', 'node ./scripts/self-host-predeploy && node ./dist/index.js']
    # ports:
    # - '3010:3010'
    #   - '5555:5555'
    expose:
      - '80'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      # custom configurations
      - frontend_volume:/root/.affine/config
      # blob storage
      - frontend_storage:/root/.affine/storage
    logging:
      driver: 'json-file'
      options:
        max-size: '1000m'
    restart: unless-stopped
    env_file:
      - ./.env

  redis:
    image: redis
    container_name: affine_redis
    restart: unless-stopped
    volumes:
      - redis_volume:/data
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres
    container_name: affine_postgres
    restart: unless-stopped
    volumes:
      - postgresql_volume:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U affine']
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./.env

  # traefik:
  #   image: affine_production_traefik
  #   build:
  #     context: ./treafik
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - affine
  #   volumes:
  #     - production_traefik:/etc/traefik/acme
  #   ports:
  #     - '0.0.0.0:80:80'
  #     - '0.0.0.0:443:443'

  nginx:
    image: nginx:latest
    restart: unless-stopped
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - affine
    volumes:
      - production_media:/usr/share/nginx/media:ro

  # nginx:
  #   image: nginx:latest
  #   restart: unless-stopped
  #   build:
  #     context: ./nginx
  #     dockerfile: Dockerfile
  #   ports:
  #     - '80:80'
  #     - "443:443"
  #   volumes:
  #     - ./nginx/nginx/:/etc/nginx/templates:rw
  #   # command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''
  #   depends_on:
  #     - affine
  #   # env_file:
  #   #   - ./.env

  # certbot:
  #   image: certbot/certbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./certbot/conf/:/etc/letsencrypt/:rw
  #     - ./certbot/www/:/var/www/certbot/:rw
  #   entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
# volumes:
# postgresql_volume:
# frontend_volume:
# frontend_volume_storage:
# certbot_certs:
# redis_volume:
